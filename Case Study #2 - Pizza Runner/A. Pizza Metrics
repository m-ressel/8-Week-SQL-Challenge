**Schema (PostgreSQL v13)**

    DROP TABLE IF EXISTS runners;
    CREATE TABLE runners (
      "runner_id" INTEGER,
      "registration_date" DATE
    );
    INSERT INTO runners
      ("runner_id", "registration_date")
    VALUES
      (1, '2021-01-01'),
      (2, '2021-01-03'),
      (3, '2021-01-08'),
      (4, '2021-01-15');
    
    
    DROP TABLE IF EXISTS customer_orders;
    CREATE TABLE customer_orders (
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders
      ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
    VALUES
      ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
      ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
      ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
      ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
      ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
      ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
      ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
      ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
      ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
      ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
      ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
      ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');
    
    
    DROP TABLE IF EXISTS runner_orders;
    CREATE TABLE runner_orders (
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders
      ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
    VALUES
      ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
      ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
      ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
      ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
      ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
      ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
      ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
      ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
      ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
      ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');
    
    
    DROP TABLE IF EXISTS pizza_names;
    CREATE TABLE pizza_names (
      "pizza_id" INTEGER,
      "pizza_name" TEXT
    );
    INSERT INTO pizza_names
      ("pizza_id", "pizza_name")
    VALUES
      (1, 'Meatlovers'),
      (2, 'Vegetarian');
    
    
    DROP TABLE IF EXISTS pizza_recipes;
    CREATE TABLE pizza_recipes (
      "pizza_id" INTEGER,
      "toppings" TEXT
    );
    INSERT INTO pizza_recipes
      ("pizza_id", "toppings")
    VALUES
      (1, '1, 2, 3, 4, 5, 6, 8, 10'),
      (2, '4, 6, 7, 9, 11, 12');
    
    
    DROP TABLE IF EXISTS pizza_toppings;
    CREATE TABLE pizza_toppings (
      "topping_id" INTEGER,
      "topping_name" TEXT
    );
    INSERT INTO pizza_toppings
      ("topping_id", "topping_name")
    VALUES
      (1, 'Bacon'),
      (2, 'BBQ Sauce'),
      (3, 'Beef'),
      (4, 'Cheese'),
      (5, 'Chicken'),
      (6, 'Mushrooms'),
      (7, 'Onions'),
      (8, 'Pepperoni'),
      (9, 'Peppers'),
      (10, 'Salami'),
      (11, 'Tomatoes'),
      (12, 'Tomato Sauce');
      
      
    -- cleaning data
    
    DROP TABLE IF EXISTS customer_orders_clean;
    CREATE TABLE customer_orders_clean(
      "order_id" INTEGER,
      "customer_id" INTEGER,
      "pizza_id" INTEGER,
      "exclusions" VARCHAR(4),
      "extras" VARCHAR(4),
      "order_time" TIMESTAMP
    );
    
    INSERT INTO customer_orders_clean
    SELECT order_id, customer_id, pizza_id, 
    CASE
    WHEN exclusions IS NULL or exclusions = 'null' THEN '' /* replacing nulls and "null" with "" */
    ELSE exclusions 
    END AS exclusions,
    CASE
    WHEN extras IS NULL or extras = 'null' THEN '' /* replacing nulls and "null" with "" */
    ELSE extras 
    END AS extras,
    order_time
    FROM customer_orders;
    
    
    DROP TABLE IF EXISTS runner_orders_clean;
    CREATE TABLE runner_orders_clean(
      "order_id" INTEGER,
      "runner_id" INTEGER,
      "pickup_time" VARCHAR(19),
      "distance" VARCHAR(7),
      "duration" VARCHAR(10),
      "cancellation" VARCHAR(23)
    );
    
    INSERT INTO runner_orders_clean
    SELECT order_id,
    runner_id, 
    CASE
    WHEN pickup_time = 'null' THEN '' /* replacing "nulls" with "" */
    ELSE pickup_time 
    END AS pickup_time, 
    CASE
    WHEN distance = 'null' THEN ''
    WHEN distance LIKE '%km%' THEN REPLACE(distance,'km','') /* deleting km from distance */
    ELSE distance
    END AS distance, 
    CASE
    WHEN duration = 'null' THEN '' /* replacing "nulls" with "" */
    WHEN duration LIKE '%minutes%' THEN REPLACE(duration,'minutes','') /* deleting min/minutes/minute from duration */
    WHEN duration LIKE '%mins%' THEN REPLACE(duration,'mins','')
    WHEN duration LIKE '%minute%' THEN REPLACE(duration,'minute','') 
    ELSE duration
    END AS duration, 
    CASE
    WHEN cancellation IS NULL or cancellation LIKE 'null' THEN ''
    ELSE cancellation 
    END AS cancellation 
    FROM runner_orders;
    
    -- replacing old tables with new ones
    DROP TABLE customer_orders;
    ALTER TABLE customer_orders_clean RENAME TO customer_orders;
    
    DROP TABLE runner_orders;
    ALTER TABLE runner_orders_clean RENAME TO runner_orders;
    
    

---

**Query #1**

    SELECT COUNT(*) as total_count
    FROM customer_orders;

| total_count |
| ----------- |
| 14          |

---
**Query #2**

    SELECT 
    COUNT(DISTINCT order_id) AS orders_count 
    FROM customer_orders;

| orders_count |
| ------------ |
| 10           |

---
**Query #3**

    SELECT 
    runner_id, 
    COUNT(order_id) AS successful_orders 
    FROM runner_orders
    WHERE cancellation = ''
    GROUP BY runner_id;

| runner_id | successful_orders |
| --------- | ----------------- |
| 1         | 4                 |
| 2         | 3                 |
| 3         | 1                 |

---
**Query #4**

    SELECT 
    pn.pizza_name, 
    COUNT(co.pizza_id) AS count 
    FROM customer_orders AS co
    JOIN pizza_names AS pn ON pn.pizza_id = co.pizza_id
    JOIN runner_orders AS ro ON ro.order_id = co.order_id
    WHERE ro.cancellation = ''
    GROUP BY pn.pizza_name;

| pizza_name | count |
| ---------- | ----- |
| Meatlovers | 9     |
| Vegetarian | 3     |

---
**Query #5**

    SELECT 
    co.customer_id,
    pn.pizza_name,
    COUNT(*) AS count
    FROM customer_orders AS co
    JOIN pizza_names AS pn ON pn.pizza_id = co.pizza_id
    GROUP BY pn.pizza_name, co.customer_id
    ORDER BY co.customer_id;

| customer_id | pizza_name | count |
| ----------- | ---------- | ----- |
| 101         | Meatlovers | 2     |
| 101         | Vegetarian | 1     |
| 102         | Meatlovers | 2     |
| 102         | Vegetarian | 1     |
| 103         | Meatlovers | 3     |
| 103         | Vegetarian | 1     |
| 104         | Meatlovers | 3     |
| 105         | Vegetarian | 1     |

---
**Query #6**

    SELECT MAX(count) AS maximum_number_of_delivered_pizzas
    FROM(
      SELECT
      co.order_id, 
      COUNT(*) AS count 
      FROM customer_orders AS co
      JOIN runner_orders AS ro ON ro.order_id = co.order_id
      WHERE ro.cancellation = ''
      GROUP BY co.order_id) t;

| maximum_number_of_delivered_pizzas |
| ---------------------------------- |
| 3                                  |

---
**Query #7**

    SELECT 
    c.customer_id,
    SUM(
      CASE 
      WHEN c.exclusions = '' AND c.extras = '' THEN 1 
      ELSE 0 
      END) AS no_changes,
    SUM(
      CASE 
      WHEN c.exclusions <> '' OR c.extras <> '' then 1 else 0 end) AS at_least_1_change
    FROM customer_orders AS c
    JOIN runner_orders AS r ON r.order_id = c.order_id
    WHERE r.cancellation = ''
    GROUP BY c.customer_id;

| customer_id | no_changes | at_least_1_change |
| ----------- | ---------- | ----------------- |
| 101         | 2          | 0                 |
| 102         | 3          | 0                 |
| 105         | 0          | 1                 |
| 104         | 1          | 2                 |
| 103         | 0          | 3                 |

---
**Query #8**

    SELECT 
    SUM(CASE 
        WHEN c.exclusions <> '' AND c.extras <> '' THEN 1 
        ELSE 0 
        END) AS count
    FROM customer_orders AS c
    JOIN runner_orders AS r ON r.order_id = c.order_id
    WHERE r.cancellation = '';

| count |
| ----- |
| 1     |

---
**Query #9**

    SELECT 
    EXTRACT(HOUR from order_time) AS hours, 
    COUNT(*) AS pizza_count
    FROM customer_orders
    GROUP BY hours
    ORDER BY hours;

| hours | pizza_count |
| ----- | ----------- |
| 11    | 1           |
| 13    | 3           |
| 18    | 3           |
| 19    | 1           |
| 21    | 3           |
| 23    | 3           |

---
**Query #10**

    SELECT 
    TO_CHAR(order_time, 'Day') AS weekday,
    COUNT(*) AS pizza_count
    FROM customer_orders
    GROUP BY weekday;

| weekday   | pizza_count |
| --------- | ----------- |
| Saturday  | 5           |
| Thursday  | 3           |
| Friday    | 1           |
| Wednesday | 5           |

---

[View on DB Fiddle](https://www.db-fiddle.com/f/7VcQKQwsS3CTkGRFG7vu98/65)
